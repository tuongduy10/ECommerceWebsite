// <auto-generated />
using System;
using ECommerce.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ECommerce.Data.Migrations
{
    [DbContext(typeof(ECommerceContext))]
    partial class ECommerceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ECommerce.Data.Entities.Attribute", b =>
                {
                    b.Property<int>("AttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttributeName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("AttributeId");

                    b.ToTable("Attribute");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.Bank", b =>
                {
                    b.Property<int>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankAccountName")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BankAccountNumber")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("BankImage")
                        .HasColumnType("text");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("BankId");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.Banner", b =>
                {
                    b.Property<int>("BannerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BannerPath")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("BannerId");

                    b.ToTable("Banner");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BlogContent")
                        .HasColumnType("ntext");

                    b.Property<byte?>("BlogPosition")
                        .HasColumnType("tinyint");

                    b.Property<string>("BlogTitle")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("BlogId");

                    b.ToTable("Blog");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandImagePath")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<string>("DescriptionTitle")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<bool?>("Highlights")
                        .HasColumnType("bit");

                    b.Property<bool?>("New")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("BrandId");

                    b.HasIndex("DiscountId");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.BrandCategory", b =>
                {
                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("BrandId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("BrandCategory");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.Common.District", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AdministrativeUnitId")
                        .HasColumnType("int");

                    b.Property<string>("CodeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProvinceCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.Common.Province", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AdministrativeRegionId")
                        .HasColumnType("int");

                    b.Property<int?>("AdministrativeUnitId")
                        .HasColumnType("int");

                    b.Property<string>("CodeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.Common.Ward", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AdministrativeUnitId")
                        .HasColumnType("int");

                    b.Property<string>("CodeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DistrictCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("Wards");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.Configuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("AddressUrl")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("FaviconPath")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("LogoPath")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Mail")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Owner")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("WebsiteName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DiscountCode")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("DiscountStock")
                        .HasColumnType("int");

                    b.Property<decimal?>("DiscountValue")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("ForBrand")
                        .HasColumnName("forBrand")
                        .HasColumnType("bit");

                    b.Property<bool?>("ForGlobal")
                        .HasColumnName("forGlobal")
                        .HasColumnType("bit");

                    b.Property<bool?>("ForShop")
                        .HasColumnName("forShop")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPercent")
                        .HasColumnName("isPercent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("DiscountId");

                    b.ToTable("Discount");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.Header", b =>
                {
                    b.Property<int>("HeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HeaderName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte?>("HeaderPosition")
                        .HasColumnType("tinyint");

                    b.Property<string>("HeaderUrl")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("HeaderId");

                    b.ToTable("Header");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.Interest", b =>
                {
                    b.Property<int>("RateId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool?>("Liked")
                        .HasColumnType("bit");

                    b.HasKey("RateId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Interest");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.MessageHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attachment")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FromName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FromPhoneNumber")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Status")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ToPhoneNumber")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Type")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("MessageHistory");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InfoId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("JsLink")
                        .HasColumnType("ntext");

                    b.Property<int?>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int");

                    b.Property<string>("TextContent")
                        .HasColumnType("ntext");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.HasIndex("TypeId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeCode")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("NotificationType");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.OnlineHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AccessDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OnlineHistory");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.Option", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OptionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("OptionId");

                    b.ToTable("Option");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.OptionValue", b =>
                {
                    b.Property<int>("OptionValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsBaseValue")
                        .HasColumnName("isBaseValue")
                        .HasColumnType("bit");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.Property<string>("OptionValueName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("OptionValueId");

                    b.HasIndex("OptionId");

                    b.ToTable("OptionValue");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.ProductSchema", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Delivery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DiscountAvailable")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte?>("DiscountPercent")
                        .HasColumnType("tinyint");

                    b.Property<decimal?>("DiscountPreOrder")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("Highlights")
                        .HasColumnType("bit");

                    b.Property<string>("Insurance")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<bool?>("Legit")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasColumnType("ntext");

                    b.Property<bool?>("New")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Ppc")
                        .HasColumnName("PPC")
                        .HasColumnType("varchar(8)")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<decimal?>("PriceAvailable")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceForSeller")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceImport")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PricePreOrder")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ProductAddedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ProductDescription")
                        .HasColumnType("ntext");

                    b.Property<string>("ProductDescriptionMobile")
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("ProductImportDate")
                        .HasColumnType("date");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar")
                        .HasMaxLength(100);

                    b.Property<byte?>("ProductRate")
                        .HasColumnType("tinyint");

                    b.Property<int?>("ProductStock")
                        .HasColumnType("int");

                    b.Property<decimal?>("ProfitAvailable")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ProfitForSeller")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ProfitPreOrder")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Repay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<string>("SizeGuide")
                        .HasColumnType("ntext");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("ShopId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.ProductSchemaAttribute", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("ProductId", "AttributeId");

                    b.HasIndex("AttributeId");

                    b.ToTable("ProductAttribute");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.ProductSchemaImage", b =>
                {
                    b.Property<int>("ProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductImagePath")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("ProductImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.ProductSchemaOptionValue", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("OptionValueId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "OptionValueId");

                    b.HasIndex("OptionValueId");

                    b.ToTable("ProductOptionValue");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.ProductSchemaPrice", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal?>("PriceOnSell")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("ProductId", "ProductTypeId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("ProductPrice");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.ProductSchemaType", b =>
                {
                    b.Property<int>("ProductTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProductTypeName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ProductTypeId");

                    b.ToTable("ProductType");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.ProductSchemaUserImage", b =>
                {
                    b.Property<int>("ProductUserImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductUserImagePath")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("ProductUserImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductUserImage");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.Rate", b =>
                {
                    b.Property<int>("RateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("HtmlPosition")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("IdsToDelete")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("RateValue")
                        .HasColumnType("int");

                    b.Property<int?>("RepliedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserRepliedId")
                        .HasColumnType("int");

                    b.HasKey("RateId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserRepliedId");

                    b.ToTable("Rate");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.RatingImage", b =>
                {
                    b.Property<int>("RatingImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("RateId")
                        .HasColumnType("int");

                    b.Property<string>("RatingImagePath")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("RatingImageId");

                    b.HasIndex("RateId");

                    b.ToTable("RatingImage");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("RoleId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.Shop", b =>
                {
                    b.Property<int>("ShopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<string>("ShopAddress")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ShopCityCode")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ShopDistrictCode")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ShopJoinDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ShopMail")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ShopPhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ShopWardCode")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Tax")
                        .HasColumnType("tinyint");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ShopId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("UserId");

                    b.ToTable("Shop");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.ShopBank", b =>
                {
                    b.Property<int>("ShopBankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ShopAccountName")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ShopAccountNumber")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("ShopBankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.HasKey("ShopBankId");

                    b.HasIndex("ShopId");

                    b.ToTable("ShopBank");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.ShopBrand", b =>
                {
                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.HasKey("ShopId", "BrandId");

                    b.HasIndex("BrandId");

                    b.ToTable("ShopBrand");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.SizeGuide", b =>
                {
                    b.Property<int>("SizeGuideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsBaseSizeGuide")
                        .HasColumnName("isBaseSizeGuide")
                        .HasColumnType("bit");

                    b.Property<string>("SizeContent")
                        .HasColumnType("ntext");

                    b.HasKey("SizeGuideId");

                    b.ToTable("SizeGuide");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.Social", b =>
                {
                    b.Property<int>("SocialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Icon")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<byte?>("Position")
                        .HasColumnType("tinyint");

                    b.Property<string>("SocialName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SocialUrl")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("SocialId");

                    b.ToTable("Social");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.SubCategory", b =>
                {
                    b.Property<int>("SubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("SizeGuideId")
                        .HasColumnType("int");

                    b.Property<string>("SubCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("SubCategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SizeGuideId");

                    b.ToTable("SubCategory");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.SubCategoryAttribute", b =>
                {
                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.HasKey("AttributeId", "SubCategoryId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("SubCategoryAttribute");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.SubCategoryOption", b =>
                {
                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.HasKey("SubCategoryId", "OptionId");

                    b.HasIndex("OptionId");

                    b.ToTable("SubCategoryOption");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSystemAccount")
                        .HasColumnName("isSystemAccount")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastOnline")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserAddress")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("UserCityCode")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserCityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserDistrictCode")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserDistrictName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserFullName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("UserJoinDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserMail")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserPhone")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserWardCode")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserWardName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.Brand", b =>
                {
                    b.HasOne("ECommerce.Data.Entities.Discount", "Discount")
                        .WithMany("Brands")
                        .HasForeignKey("DiscountId")
                        .HasConstraintName("FK_Brand_Discount");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.BrandCategory", b =>
                {
                    b.HasOne("ECommerce.Data.Entities.Brand", "Brand")
                        .WithMany("BrandCategories")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_BrandCategory_Brand")
                        .IsRequired();

                    b.HasOne("ECommerce.Data.Entities.Category", "Category")
                        .WithMany("BrandCategories")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_BrandCategory_Category")
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerce.Data.Entities.Interest", b =>
                {
                    b.HasOne("ECommerce.Data.Entities.Rate", "Rate")
                        .WithMany("Interests")
                        .HasForeignKey("RateId")
                        .HasConstraintName("FK_Interest_Rate")
                        .IsRequired();

                    b.HasOne("ECommerce.Data.Entities.User", "User")
                        .WithMany("Interests")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Interest_User")
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerce.Data.Entities.Notification", b =>
                {
                    b.HasOne("ECommerce.Data.Entities.User", "Receiver")
                        .WithMany("NotificationReceivers")
                        .HasForeignKey("ReceiverId")
                        .HasConstraintName("FK_Notification_User");

                    b.HasOne("ECommerce.Data.Entities.User", "Sender")
                        .WithMany("NotificationSenders")
                        .HasForeignKey("SenderId")
                        .HasConstraintName("FK_Notification_User1");

                    b.HasOne("ECommerce.Data.Entities.NotificationType", "Type")
                        .WithMany("Notifications")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK_Notification_NotificationType");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.OptionValue", b =>
                {
                    b.HasOne("ECommerce.Data.Entities.Option", "Option")
                        .WithMany("OptionValues")
                        .HasForeignKey("OptionId")
                        .HasConstraintName("FK_OptionValue_Option")
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerce.Data.Entities.ProductSchema", b =>
                {
                    b.HasOne("ECommerce.Data.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_Product_Brand")
                        .IsRequired();

                    b.HasOne("ECommerce.Data.Entities.Shop", "Shop")
                        .WithMany("Products")
                        .HasForeignKey("ShopId")
                        .HasConstraintName("FK_Product_Shop")
                        .IsRequired();

                    b.HasOne("ECommerce.Data.Entities.SubCategory", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId")
                        .HasConstraintName("FK_Product_SubCategory")
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerce.Data.Entities.ProductSchemaAttribute", b =>
                {
                    b.HasOne("ECommerce.Data.Entities.Attribute", "Attribute")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("AttributeId")
                        .HasConstraintName("FK_ProductAttribute_Attribute")
                        .IsRequired();

                    b.HasOne("ECommerce.Data.Entities.ProductSchema", "Product")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductAttribute_Product")
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerce.Data.Entities.ProductSchemaImage", b =>
                {
                    b.HasOne("ECommerce.Data.Entities.ProductSchema", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductImage_Product")
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerce.Data.Entities.ProductSchemaOptionValue", b =>
                {
                    b.HasOne("ECommerce.Data.Entities.OptionValue", "OptionValue")
                        .WithMany("ProductOptionValues")
                        .HasForeignKey("OptionValueId")
                        .HasConstraintName("FK_ProductOptionValue_OptionValue")
                        .IsRequired();

                    b.HasOne("ECommerce.Data.Entities.ProductSchema", "Product")
                        .WithMany("ProductOptionValues")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductOptionValue_Product")
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerce.Data.Entities.ProductSchemaPrice", b =>
                {
                    b.HasOne("ECommerce.Data.Entities.ProductSchema", "Product")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductPrice_Product")
                        .IsRequired();

                    b.HasOne("ECommerce.Data.Entities.ProductSchemaType", "ProductType")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductTypeId")
                        .HasConstraintName("FK_ProductPrice_ProductType")
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerce.Data.Entities.ProductSchemaUserImage", b =>
                {
                    b.HasOne("ECommerce.Data.Entities.ProductSchema", "Product")
                        .WithMany("ProductUserImages")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductUserImage_Product");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.Rate", b =>
                {
                    b.HasOne("ECommerce.Data.Entities.ProductSchema", "Product")
                        .WithMany("Rates")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Rate_Product");

                    b.HasOne("ECommerce.Data.Entities.User", "User")
                        .WithMany("RateUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Rate_User");

                    b.HasOne("ECommerce.Data.Entities.User", "UserReplied")
                        .WithMany("RateUserReplieds")
                        .HasForeignKey("UserRepliedId")
                        .HasConstraintName("FK_Rate_UserReplied");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.RatingImage", b =>
                {
                    b.HasOne("ECommerce.Data.Entities.Rate", "Rate")
                        .WithMany("RatingImages")
                        .HasForeignKey("RateId")
                        .HasConstraintName("FK_RatingImage_Rate");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.Shop", b =>
                {
                    b.HasOne("ECommerce.Data.Entities.Discount", "Discount")
                        .WithMany("Shops")
                        .HasForeignKey("DiscountId")
                        .HasConstraintName("FK_Shop_Discount");

                    b.HasOne("ECommerce.Data.Entities.User", "User")
                        .WithMany("Shops")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Shop_User");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.ShopBank", b =>
                {
                    b.HasOne("ECommerce.Data.Entities.Shop", "Shop")
                        .WithMany("ShopBanks")
                        .HasForeignKey("ShopId")
                        .HasConstraintName("FK_ShopBank_Shop")
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerce.Data.Entities.ShopBrand", b =>
                {
                    b.HasOne("ECommerce.Data.Entities.Brand", "Brand")
                        .WithMany("ShopBrands")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_ShopBrand_Brand")
                        .IsRequired();

                    b.HasOne("ECommerce.Data.Entities.Shop", "Shop")
                        .WithMany("ShopBrands")
                        .HasForeignKey("ShopId")
                        .HasConstraintName("FK_ShopBrand_Shop")
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerce.Data.Entities.SubCategory", b =>
                {
                    b.HasOne("ECommerce.Data.Entities.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_SubCategory_Category")
                        .IsRequired();

                    b.HasOne("ECommerce.Data.Entities.SizeGuide", "SizeGuide")
                        .WithMany("SubCategories")
                        .HasForeignKey("SizeGuideId")
                        .HasConstraintName("FK_SubCategory_SizeGuide");
                });

            modelBuilder.Entity("ECommerce.Data.Entities.SubCategoryAttribute", b =>
                {
                    b.HasOne("ECommerce.Data.Entities.Attribute", "Attribute")
                        .WithMany("SubCategoryAttributes")
                        .HasForeignKey("AttributeId")
                        .HasConstraintName("FK_SubCategoryAttribute_Attribute")
                        .IsRequired();

                    b.HasOne("ECommerce.Data.Entities.SubCategory", "SubCategory")
                        .WithMany("SubCategoryAttributes")
                        .HasForeignKey("SubCategoryId")
                        .HasConstraintName("FK_SubCategoryAttribute_SubCategory")
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerce.Data.Entities.SubCategoryOption", b =>
                {
                    b.HasOne("ECommerce.Data.Entities.Option", "Option")
                        .WithMany("SubCategoryOptions")
                        .HasForeignKey("OptionId")
                        .HasConstraintName("FK_SubCategoryOption_Option")
                        .IsRequired();

                    b.HasOne("ECommerce.Data.Entities.SubCategory", "SubCategory")
                        .WithMany("SubCategoryOptions")
                        .HasForeignKey("SubCategoryId")
                        .HasConstraintName("FK_SubCategoryOption_SubCategory")
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerce.Data.Entities.UserRole", b =>
                {
                    b.HasOne("ECommerce.Data.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_UserRole_Role")
                        .IsRequired();

                    b.HasOne("ECommerce.Data.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserRole_User")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
